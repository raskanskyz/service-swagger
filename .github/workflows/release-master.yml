on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

name: 📦 Create New Release

jobs:
  checks:
    name: ✅ Check for Release
    runs-on: macos-latest
    timeout-minutes: 15

    env:
      HUSKY: 0

    steps:
      - name: 📀 Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🧪 Check out repository code
        uses: ./.github/workflows/health-check
        with:
          run-tests: false
          run-lint: true
          run-build: true

  release:
    name: 📦 Release Version
    runs-on: macos-latest
    timeout-minutes: 60
    needs:
      - checks

    env:
      HUSKY: 0

    steps:
      - name: 📀 Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🗃️ Install Node.js Deps
        run: |
          npm ci --no-audit --no-fund --no-progress

      - name: Create a new version, update CHANGELOG.md
        run: |
          git config --global user.email "github-actions[bot]@gmail.com"
          git config --global user.name "github-actions[bot]"
          npx standard-version
          git push --follow-tags origin main

      - name: 🔨 Build Package
        run: |
          npm run build:ci

      - name: Extract version from package.json
        id: get_version
        run: |
          echo "::set-output name=version::$(jq -r '.version' package.json)"

      - name: 🤐 Archive pack file
        uses: thedoctor0/zip-release@master
        with:
          path: ./dist/service-swagger-${{ steps.get_version.outputs.version }}.dmg
          filename: service-swagger-${{ steps.get_version.outputs.version }}.dmg

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./service-swagger-${{ steps.get_version.outputs.version }}.dmg
          asset_name: service-swagger-${{ steps.get_version.outputs.version }}.dmg
          asset_content_type: application/octet-stream
